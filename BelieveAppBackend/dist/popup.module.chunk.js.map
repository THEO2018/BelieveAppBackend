{"version":3,"sources":["/home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup-routing.module.ts","/home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup.component.html","/home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup.component.scss","/home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup.component.ts","/home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup.module.ts","/home/netset/projects/new/BelieveAppAdmin/node_modules/angular-confirmation-popover/esm5/angular-confirmation-popover.js","/home/netset/projects/new/BelieveAppAdmin/node_modules/positioning/dist/positioning.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAAyC;AACc;AACJ;AAEnD,IAAM,MAAM,GAAW;IACnB;QACI,IAAI,EAAE,EAAE;QACR,SAAS,EAAE,wEAAc;KAC5B;CACJ,CAAC;AAMF;IAAA;IAAiC,CAAC;IAArB,kBAAkB;QAJ9B,+DAAQ,CAAC;YACN,OAAO,EAAE,CAAC,qEAAY,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC;YACxC,OAAO,EAAE,CAAC,qEAAY,CAAC;SAC1B,CAAC;OACW,kBAAkB,CAAG;IAAD,yBAAC;CAAA;AAAH;;;;;;;;ACf/B,+oBAA+oB,sFAAsF,aAAa,yD;;;;;;;ACAlvB;AACA;;;AAGA;AACA;;AAEA;;;AAGA;AACA,2C;;;;;;;;;;;;;;;;;;;ACXkD;AAOlD;IAQE;QAPA,eAAU,GAAa,CAAC,KAAK,EAAE,MAAM,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;QAC1D,iBAAY,GAAW,eAAe,CAAC;QACvC,mBAAc,GAAW,iDAAiD,CAAC;QAC3E,gBAAW,GAAW,4CAA4C,CAAC;QACnE,eAAU,GAAW,+CAA+C,CAAC;QACrE,mBAAc,GAAY,KAAK,CAAC;QAChC,kBAAa,GAAY,KAAK,CAAC;IACf,CAAC;IAEjB,iCAAQ,GAAR;IACA,CAAC;IAXU,cAAc;QAL1B,gEAAS,CAAC;YACT,QAAQ,EAAE,WAAW;;;SAGtB,CAAC;;OACW,cAAc,CAa1B;IAAD,qBAAC;CAAA;AAb0B;;;;;;;;;;;;;;;;;;;;;;;;;ACPc;AACM;AAC/C,6DAA6D;AACK;AACN;AACT;AACH;AACE;AACuB;AAUzE;IAAA;IAA0B,CAAC;IAAd,WAAW;QARvB,+DAAQ,CAAC;YACN,OAAO,EAAE,CAAC,6DAAY,EAAE,iFAAkB,EAAE,iEAAgB,EAAE,mEAAW,EAAC,2EAAmB;gBACzF,gEAAkB;gBAClB,+FAAyB,CAAC,OAAO,CAAC;oBACpC,iBAAiB,EAAE,QAAQ,CAAC,oBAAoB;iBACjD,CAAC,CAAC;YACH,YAAY,EAAE,CAAC,wEAAc,CAAC;SACjC,CAAC;OACW,WAAW,CAAG;IAAD,kBAAC;CAAA;AAAH;;;;;;;;;;;;;;;;;;;;;AClBxB;AAC6L;AACvK;AACC;AACvB;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK,kEAAmB;AACxB;AACA;AACA,+DAA+D,WAAW;AAC1E;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA,qCAAqC,uBAAuB,OAAO,yDAAyD,kBAAkB,OAAO,yDAAyD,iBAAiB,OAAO,YAAY,yBAAyB,OAAO,qBAAqB,sBAAsB,sCAAsC,OAAO,8BAA8B,wBAAwB,OAAO,gDAAgD,yBAAyB,OAAO,+CAA+C,0BAA0B,OAAO,8BAA8B,oCAAoC,OAAO,uEAAuE,0BAA0B,uBAAuB,OAAO,sEAAsE,wBAAwB,yBAAyB,OAAO;AAC74B;AACA,g/BAAg/B,mBAAmB,kdAAkd,mBAAmB,ySAAyS,iBAAiB;AAClyD,aAAa,IAAI;AACjB;AACA;AACA,iEAAiE;AACjE,KAAK,0CAA0C;AAC/C,EAAE;AACF;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iFAAiF,qCAAqC,EAAE;AACxH,oFAAoF,qCAAqC,EAAE;AAC3H,2EAA2E,gCAAgC,EAAE;AAC7G;AACA,aAAa;AACb,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,2BAA2B,EAAE;AAC7B,2BAA2B,EAAE;AAC7B;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,uDAAuD,aAAa,EAAE;AACtE;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA,aAAa,IAAI;AACjB;AACA;AACA,2DAA2D;AAC3D,KAAK,yEAA0B;AAC/B,KAAK,mEAAoB;AACzB,KAAK,oCAAoC;AACzC,KAAK,iFAAkC;AACvC,KAAK,0EAAqB;AAC1B,KAAK,kEAAmB;AACxB,EAAE;AACF;AACA,sBAAsB,6DAAc;AACpC,wBAAwB,6DAAc;AACtC,qBAAqB,6DAAc;AACnC,oBAAoB,6DAAc;AAClC,mBAAmB,6DAAc;AACjC,2BAA2B,6DAAc;AACzC,0BAA0B,6DAAc;AACxC,qBAAqB,6DAAc;AACnC,2BAA2B,6DAAc;AACzC,0BAA0B,6DAAc;AACxC,oBAAoB,6DAAc;AAClC,gBAAgB,6DAAc;AAC9B,wBAAwB,6DAAc;AACtC,sBAAsB,8DAAe;AACrC,iBAAiB,8DAAe;AAChC,gBAAgB,8DAAe;AAC/B,sBAAsB,6DAAc;AACpC,sBAAsB,6DAAc;AACpC,4BAA4B,6DAAc;AAC1C,uBAAuB,sFAAuC;AAC9D;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA,aAAa,IAAI;AACjB;AACA;AACA,6CAA6C;AAC7C,KAAK,mEAAoB;AACzB,EAAE;AACF;AACA,kBAAkB,6DAAc;AAChC;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,WAAW,EAAE;AACb,YAAY;AACZ;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,iCAAiC,cAAc;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,IAAI;AACjB;AACA;AACA,wDAAwD,WAAW;AACnE;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA,cAAc,WAAW;AACzB;AACA;AACA;AACA;AACQ;AACR;;;;;;;;;;AC1bA;AAAA;AACA;AACA;AACA;AACA;AACA,6DAA6D,yCAAyC;AACtG,+DAA+D,yCAAyC;AACxG;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA,4BAA4B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,cAAc;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACO;AACR;AACA;AACA;AACA;AACA;AACA;AACA,uC","file":"popup.module.chunk.js","sourcesContent":["import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { PopupComponent } from './popup.component';\n\nconst routes: Routes = [\n    {\n        path: '',\n        component: PopupComponent\n    }\n];\n\n@NgModule({\n    imports: [RouterModule.forChild(routes)],\n    exports: [RouterModule]\n})\nexport class PopupRoutingModule {}\n\n\n\n// WEBPACK FOOTER //\n// /home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup-routing.module.ts","module.exports = \"  \\n     \\n      <div class=\\\"text-center\\\">\\n        <span *ngFor=\\\"let placement of placements\\\">\\n          <button\\n            class=\\\"btn btn-default\\\"\\n            mwlConfirmationPopover\\n            [popoverTitle]=\\\"popoverTitle\\\"\\n            [popoverMessage]=\\\"popoverMessage\\\"\\n            [confirmText]=\\\"confirmText\\\"\\n            [cancelText]=\\\"cancelText\\\"\\n            [placement]=\\\"placement\\\"\\n            (confirm)=\\\"confirmClicked = true\\\"\\n            (cancel)=\\\"cancelClicked = true\\\"\\n            confirmButtonType=\\\"danger\\\"\\n            cancelButtonType=\\\"default\\\"\\n            (click)=\\\"confirmClicked = false; cancelClicked = false\\\"\\n            [appendToBody]=\\\"true\\\">\\n            Show on {{ placement }}\\n          </button>\\n        </span>\\n      </div>\\n  \"\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup.component.html\n// module id = ../../../../../src/app/layout/popup/popup.component.html\n// module chunks = popup.module","exports = module.exports = require(\"../../../../node_modules/css-loader/lib/css-base.js\")(false);\n// imports\n\n\n// module\nexports.push([module.id, \"\", \"\"]);\n\n// exports\n\n\n/*** EXPORTS FROM exports-loader ***/\nmodule.exports = module.exports.toString();\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup.component.scss\n// module id = ../../../../../src/app/layout/popup/popup.component.scss\n// module chunks = popup.module","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-popup',\n  templateUrl: './popup.component.html',\n  styleUrls: ['./popup.component.scss']\n})\nexport class PopupComponent implements OnInit {\n  placements: string[] = ['top', 'left', 'right', 'bottom'];\n  popoverTitle: string = 'Are you sure?';\n  popoverMessage: string = 'Are you really <b>sure</b> you want to do this?';\n  confirmText: string = 'Yes <i class=\"glyphicon glyphicon-ok\"></i>';\n  cancelText: string = 'No <i class=\"glyphicon glyphicon-remove\"></i>';\n  confirmClicked: boolean = false;\n  cancelClicked: boolean = false;\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// /home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup.component.ts","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n// import { NewGroupsModule as Ng2Charts } from 'ng2-charts';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { PopupRoutingModule } from './popup-routing.module';\nimport { PopupComponent } from './popup.component';\nimport { PageHeaderModule } from '../../shared';\nimport { MyDatePickerModule } from 'mydatepicker';\nimport { ConfirmationPopoverModule } from 'angular-confirmation-popover';\n\n@NgModule({\n    imports: [CommonModule, PopupRoutingModule, PageHeaderModule, FormsModule,ReactiveFormsModule,\n        MyDatePickerModule,\n        ConfirmationPopoverModule.forRoot({\n      confirmButtonType: 'danger' // set defaults here\n    })],\n    declarations: [PopupComponent]\n})\nexport class PopupModule {}\n\n\n\n// WEBPACK FOOTER //\n// /home/netset/projects/new/BelieveAppAdmin/src/app/layout/popup/popup.module.ts","import * as tslib_1 from \"tslib\";\nimport { Injectable, Component, Directive, Input, Output, EventEmitter, HostListener, ViewContainerRef, ElementRef, Injector, ComponentFactoryResolver, Renderer2, NgModule, InjectionToken } from '@angular/core';\nimport { Positioning } from 'positioning';\nimport { CommonModule } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\nvar ConfirmationPopoverOptions = /** @class */ (function () {\n    function ConfirmationPopoverOptions() {\n        this.confirmText = 'Confirm';\n        this.cancelText = 'Cancel';\n        this.confirmButtonType = 'success';\n        this.cancelButtonType = 'default';\n        this.placement = 'top';\n        this.hideConfirmButton = false;\n        this.hideCancelButton = false;\n        this.popoverClass = '';\n        this.appendToBody = false;\n        this.reverseButtonOrder = false;\n    }\n    return ConfirmationPopoverOptions;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n */\nvar ConfirmationPopoverWindowOptions = /** @class */ (function (_super) {\n    tslib_1.__extends(ConfirmationPopoverWindowOptions, _super);\n    function ConfirmationPopoverWindowOptions() {\n        return _super !== null && _super.apply(this, arguments) || this;\n    }\n    return ConfirmationPopoverWindowOptions;\n}(ConfirmationPopoverOptions));\nConfirmationPopoverWindowOptions.decorators = [\n    { type: Injectable },\n];\n/** @nocollapse */\nConfirmationPopoverWindowOptions.ctorParameters = function () { return []; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n */\nvar ConfirmationPopoverWindowComponent = /** @class */ (function () {\n    /**\n     * @param {?} options\n     */\n    function ConfirmationPopoverWindowComponent(options) {\n        this.options = options;\n    }\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverWindowComponent.prototype.ngAfterViewInit = function () {\n        this.options.onAfterViewInit();\n    };\n    return ConfirmationPopoverWindowComponent;\n}());\nConfirmationPopoverWindowComponent.decorators = [\n    { type: Component, args: [{\n                selector: 'mwl-confirmation-popover-window',\n                styles: [\n                    \"\\n    .popover {\\n      display: block;\\n    }\\n    .bs-popover-top .arrow, .bs-popover-bottom .arrow {\\n      left: 50%;\\n    }\\n    .bs-popover-left .arrow, .bs-popover-right .arrow {\\n      top: 50%;\\n    }\\n    .btn {\\n      transition: none;\\n    }\\n    .confirm-btns {\\n      display: flex;\\n      justify-content: space-around;\\n    }\\n    .confirm-btn-container {\\n      flex-basis: 50%;\\n    }\\n    .confirm-btn-container:not(:first-child) {\\n      margin-left: 4px;\\n    }\\n    .confirm-btn-container:not(:last-child) {\\n      margin-right: 4px;\\n    }\\n    .confirm-btns-reversed {\\n      flex-direction: row-reverse;\\n    }\\n    .confirm-btns-reversed .confirm-btn-container:not(:first-child) {\\n      margin-right: 4px;\\n      margin-left: 0;\\n    }\\n    .confirm-btns-reversed .confirm-btn-container:not(:last-child) {\\n      margin-right: 0;\\n      margin-left: 4px;\\n    }\\n  \"\n                ],\n                template: \"\\n    <ng-template #defaultTemplate let-options=\\\"options\\\">\\n      <div [ngClass]=\\\"[\\n        'popover',\\n        options.placement,\\n        'popover-' + options.placement,\\n        'bs-popover-' + options.placement,\\n        options.popoverClass\\n      ]\\\">\\n        <div class=\\\"popover-arrow arrow\\\"></div>\\n        <h3 class=\\\"popover-title popover-header\\\" [innerHTML]=\\\"options.popoverTitle\\\"></h3>\\n        <div class=\\\"popover-content popover-body\\\">\\n          <p [innerHTML]=\\\"options.popoverMessage\\\"></p>\\n          <div class=\\\"confirm-btns\\\" [class.confirm-btns-reversed]=\\\"options.reverseButtonOrder\\\">\\n            <div\\n              class=\\\"confirm-btn-container\\\"\\n              *ngIf=\\\"!options.hideCancelButton\\\">\\n              <button\\n                type=\\\"button\\\"\\n                [mwlFocus]=\\\"options.focusButton === 'cancel'\\\"\\n                [class]=\\\"'btn btn-block btn-' + options.cancelButtonType\\\"\\n                (click)=\\\"options.onCancel({clickEvent: $event})\\\"\\n                [innerHtml]=\\\"options.cancelText\\\">\\n              </button>\\n            </div>\\n            <div\\n              class=\\\"confirm-btn-container\\\"\\n              *ngIf=\\\"!options.hideConfirmButton\\\">\\n              <button\\n                type=\\\"button\\\"\\n                [mwlFocus]=\\\"options.focusButton === 'confirm'\\\"\\n                [class]=\\\"'btn btn-block btn-' + options.confirmButtonType\\\"\\n                (click)=\\\"options.onConfirm({clickEvent: $event})\\\"\\n                [innerHtml]=\\\"options.confirmText\\\">\\n              </button>\\n            </div>\\n          </div>\\n        </div>\\n      </div>\\n    </ng-template>\\n    <ng-template\\n      [ngTemplateOutlet]=\\\"options.customTemplate || defaultTemplate\\\"\\n      [ngTemplateOutletContext]=\\\"{options: options}\\\">\\n    </ng-template>\\n  \"\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverWindowComponent.ctorParameters = function () { return [\n    { type: ConfirmationPopoverWindowOptions, },\n]; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@internal\n * @record\n */\n/**\n * All properties can be set on the directive as attributes like so (use `ConfirmationPopoverModule.forRoot()` to configure them globally):\n * ```html\n * <button\n *  class=\"btn btn-default\"\n *  mwlConfirmationPopover\n *  [popoverTitle]=\"popoverTitle\"\n *  [popoverMessage]=\"popoverMessage\"\n *  placement=\"left\"\n *  (confirm)=\"confirmClicked = true\"\n *  (cancel)=\"cancelClicked = true\"\n *  [(isOpen)]=\"isOpen\">\n *   Show confirm popover!\n * </button>\n * ```\n */\nvar ConfirmationPopoverDirective = /** @class */ (function () {\n    /**\n     * \\@internal\n     * @param {?} viewContainerRef\n     * @param {?} elm\n     * @param {?} defaultOptions\n     * @param {?} cfr\n     * @param {?} position\n     * @param {?} renderer\n     */\n    function ConfirmationPopoverDirective(viewContainerRef, elm, defaultOptions, cfr, position, renderer) {\n        this.viewContainerRef = viewContainerRef;\n        this.elm = elm;\n        this.defaultOptions = defaultOptions;\n        this.cfr = cfr;\n        this.position = position;\n        this.renderer = renderer;\n        /**\n         * Whether to disable showing the popover. Default `false`.\n         */\n        this.isDisabled = false;\n        /**\n         * Will open or show the popover when changed.\n         * Can be sugared with `isOpenChange` to emulate 2-way binding like so `[(isOpen)]=\"isOpen\"`\n         */\n        this.isOpen = false;\n        /**\n         * Will emit when the popover is opened or closed\n         */\n        this.isOpenChange = new EventEmitter(true);\n        /**\n         * An expression that is called when the confirm button is clicked.\n         */\n        this.confirm = new EventEmitter();\n        /**\n         * An expression that is called when the cancel button is clicked.\n         */\n        this.cancel = new EventEmitter();\n        this.eventListeners = [];\n    }\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnInit = function () {\n        this.isOpenChange.emit(false);\n    };\n    /**\n     * \\@internal\n     * @param {?} changes\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnChanges = function (changes) {\n        if (changes[\"isOpen\"]) {\n            if (changes[\"isOpen\"].currentValue === true) {\n                this.showPopover();\n            }\n            else {\n                this.hidePopover();\n            }\n        }\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.ngOnDestroy = function () {\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onConfirm = function (event) {\n        this.confirm.emit(event);\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onCancel = function (event) {\n        this.cancel.emit(event);\n        this.hidePopover();\n    };\n    /**\n     * \\@internal\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.togglePopover = function () {\n        if (!this.popover) {\n            this.showPopover();\n        }\n        else {\n            this.hidePopover();\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.onDocumentClick = function (event) {\n        if (this.popover &&\n            !this.elm.nativeElement.contains(event.target) &&\n            !this.popover.location.nativeElement.contains(event.target)) {\n            this.hidePopover();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.showPopover = function () {\n        var _this = this;\n        if (!this.popover && !this.isDisabled) {\n            // work around for https://github.com/mattlewis92/angular-confirmation-popover/issues/65\n            // otherwise the document click event gets fired after the click event\n            // that triggered the popover to open (no idea why this is so)\n            setTimeout(function () {\n                _this.eventListeners = [\n                    _this.renderer.listen('document', 'click', function (event) { return _this.onDocumentClick(event); }),\n                    _this.renderer.listen('document', 'touchend', function (event) { return _this.onDocumentClick(event); }),\n                    _this.renderer.listen('window', 'resize', function () { return _this.positionPopover(); })\n                ];\n            });\n            var /** @type {?} */ options_1 = new ConfirmationPopoverWindowOptions();\n            Object.assign(options_1, this.defaultOptions, {\n                popoverTitle: this.popoverTitle,\n                popoverMessage: this.popoverMessage,\n                onConfirm: function (event) {\n                    _this.onConfirm(event);\n                },\n                onCancel: function (event) {\n                    _this.onCancel(event);\n                },\n                onAfterViewInit: function () {\n                    _this.positionPopover();\n                }\n            });\n            var /** @type {?} */ optionalParams = [\n                'confirmText',\n                'cancelText',\n                'placement',\n                'confirmButtonType',\n                'cancelButtonType',\n                'focusButton',\n                'hideConfirmButton',\n                'hideCancelButton',\n                'popoverClass',\n                'appendToBody',\n                'customTemplate',\n                'reverseButtonOrder'\n            ];\n            optionalParams.forEach(function (param) {\n                if (typeof _this[param] !== 'undefined') {\n                    ((options_1))[param] = _this[param];\n                }\n            });\n            var /** @type {?} */ componentFactory = this.cfr.resolveComponentFactory(ConfirmationPopoverWindowComponent);\n            var /** @type {?} */ childInjector = Injector.create([\n                {\n                    provide: ConfirmationPopoverWindowOptions,\n                    useValue: options_1\n                }\n            ], this.viewContainerRef.parentInjector);\n            this.popover = this.viewContainerRef.createComponent(componentFactory, this.viewContainerRef.length, childInjector);\n            if (options_1.appendToBody) {\n                document.body.appendChild(this.popover.location.nativeElement);\n            }\n            this.isOpenChange.emit(true);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.positionPopover = function () {\n        if (this.popover) {\n            var /** @type {?} */ popoverElement = this.popover.location.nativeElement.children[0];\n            var /** @type {?} */ popoverPosition = this.position.positionElements(this.elm.nativeElement, popoverElement, this.placement || this.defaultOptions.placement, this.appendToBody || this.defaultOptions.appendToBody);\n            this.renderer.setStyle(popoverElement, 'top', popoverPosition.top + \"px\");\n            this.renderer.setStyle(popoverElement, 'left', popoverPosition.left + \"px\");\n        }\n    };\n    /**\n     * @return {?}\n     */\n    ConfirmationPopoverDirective.prototype.hidePopover = function () {\n        if (this.popover) {\n            this.popover.destroy();\n            delete this.popover;\n            this.isOpenChange.emit(false);\n            this.eventListeners.forEach(function (fn) { return fn(); });\n            this.eventListeners = [];\n        }\n    };\n    return ConfirmationPopoverDirective;\n}());\nConfirmationPopoverDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlConfirmationPopover]'\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverDirective.ctorParameters = function () { return [\n    { type: ViewContainerRef, },\n    { type: ElementRef, },\n    { type: ConfirmationPopoverOptions, },\n    { type: ComponentFactoryResolver, },\n    { type: Positioning, },\n    { type: Renderer2, },\n]; };\nConfirmationPopoverDirective.propDecorators = {\n    \"popoverTitle\": [{ type: Input },],\n    \"popoverMessage\": [{ type: Input },],\n    \"confirmText\": [{ type: Input },],\n    \"cancelText\": [{ type: Input },],\n    \"placement\": [{ type: Input },],\n    \"confirmButtonType\": [{ type: Input },],\n    \"cancelButtonType\": [{ type: Input },],\n    \"focusButton\": [{ type: Input },],\n    \"hideConfirmButton\": [{ type: Input },],\n    \"hideCancelButton\": [{ type: Input },],\n    \"isDisabled\": [{ type: Input },],\n    \"isOpen\": [{ type: Input },],\n    \"customTemplate\": [{ type: Input },],\n    \"isOpenChange\": [{ type: Output },],\n    \"confirm\": [{ type: Output },],\n    \"cancel\": [{ type: Output },],\n    \"popoverClass\": [{ type: Input },],\n    \"appendToBody\": [{ type: Input },],\n    \"reverseButtonOrder\": [{ type: Input },],\n    \"togglePopover\": [{ type: HostListener, args: ['click',] },],\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * A helper directive to focus buttons. You will only need this if using a custom template\n */\nvar FocusDirective = /** @class */ (function () {\n    /**\n     * @param {?} elm\n     */\n    function FocusDirective(elm) {\n        this.elm = elm;\n    }\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    FocusDirective.prototype.ngOnChanges = function (changes) {\n        if (changes[\"mwlFocus\"] && this.mwlFocus === true) {\n            this.elm.nativeElement.focus();\n        }\n    };\n    return FocusDirective;\n}());\nFocusDirective.decorators = [\n    { type: Directive, args: [{\n                selector: '[mwlFocus]'\n            },] },\n];\n/** @nocollapse */\nFocusDirective.ctorParameters = function () { return [\n    { type: ElementRef, },\n]; };\nFocusDirective.propDecorators = {\n    \"mwlFocus\": [{ type: Input },],\n};\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar USER_OPTIONS = new InjectionToken('confirmation popover user options');\n/**\n * @param {?} userOptions\n * @return {?}\n */\nfunction optionsFactory(userOptions) {\n    var /** @type {?} */ options = new ConfirmationPopoverOptions();\n    Object.assign(options, userOptions);\n    return options;\n}\nvar ConfirmationPopoverModule = /** @class */ (function () {\n    function ConfirmationPopoverModule() {\n    }\n    /**\n     * @param {?=} options\n     * @return {?}\n     */\n    ConfirmationPopoverModule.forRoot = function (options) {\n        if (options === void 0) { options = {}; }\n        return {\n            ngModule: ConfirmationPopoverModule,\n            providers: [\n                {\n                    provide: USER_OPTIONS,\n                    useValue: options\n                },\n                {\n                    provide: ConfirmationPopoverOptions,\n                    useFactory: optionsFactory,\n                    deps: [USER_OPTIONS]\n                },\n                Positioning\n            ]\n        };\n    };\n    return ConfirmationPopoverModule;\n}());\nConfirmationPopoverModule.decorators = [\n    { type: NgModule, args: [{\n                declarations: [\n                    ConfirmationPopoverDirective,\n                    ConfirmationPopoverWindowComponent,\n                    FocusDirective\n                ],\n                imports: [CommonModule],\n                exports: [ConfirmationPopoverDirective, FocusDirective],\n                entryComponents: [ConfirmationPopoverWindowComponent]\n            },] },\n];\n/** @nocollapse */\nConfirmationPopoverModule.ctorParameters = function () { return []; };\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { ConfirmationPopoverModule, ConfirmationPopoverOptions as ɵd, ConfirmationPopoverWindowOptions as ɵf, ConfirmationPopoverWindowComponent as ɵe, ConfirmationPopoverDirective as ɵc, USER_OPTIONS as ɵa, optionsFactory as ɵb, FocusDirective as ɵg };\n//# sourceMappingURL=angular-confirmation-popover.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/netset/projects/new/BelieveAppAdmin/node_modules/angular-confirmation-popover/esm5/angular-confirmation-popover.js\n// module id = ../../../../angular-confirmation-popover/esm5/angular-confirmation-popover.js\n// module chunks = popup.module","// previous version:\n// https://github.com/angular-ui/bootstrap/blob/07c31d0731f7cb068a1932b8e01d2312b796b4ec/src/position/position.js\nvar Positioning = (function () {\n    function Positioning() {\n    }\n    Positioning.prototype.getAllStyles = function (element) { return window.getComputedStyle(element); };\n    Positioning.prototype.getStyle = function (element, prop) { return this.getAllStyles(element)[prop]; };\n    Positioning.prototype.isStaticPositioned = function (element) {\n        return (this.getStyle(element, 'position') || 'static') === 'static';\n    };\n    Positioning.prototype.offsetParent = function (element) {\n        var offsetParentEl = element.offsetParent || document.documentElement;\n        while (offsetParentEl && offsetParentEl !== document.documentElement && this.isStaticPositioned(offsetParentEl)) {\n            offsetParentEl = offsetParentEl.offsetParent;\n        }\n        return offsetParentEl || document.documentElement;\n    };\n    Positioning.prototype.position = function (element, round) {\n        if (round === void 0) { round = true; }\n        var elPosition;\n        var parentOffset = { width: 0, height: 0, top: 0, bottom: 0, left: 0, right: 0 };\n        if (this.getStyle(element, 'position') === 'fixed') {\n            elPosition = element.getBoundingClientRect();\n        }\n        else {\n            var offsetParentEl = this.offsetParent(element);\n            elPosition = this.offset(element, false);\n            if (offsetParentEl !== document.documentElement) {\n                parentOffset = this.offset(offsetParentEl, false);\n            }\n            parentOffset.top += offsetParentEl.clientTop;\n            parentOffset.left += offsetParentEl.clientLeft;\n        }\n        elPosition.top -= parentOffset.top;\n        elPosition.bottom -= parentOffset.top;\n        elPosition.left -= parentOffset.left;\n        elPosition.right -= parentOffset.left;\n        if (round) {\n            elPosition.top = Math.round(elPosition.top);\n            elPosition.bottom = Math.round(elPosition.bottom);\n            elPosition.left = Math.round(elPosition.left);\n            elPosition.right = Math.round(elPosition.right);\n        }\n        return elPosition;\n    };\n    Positioning.prototype.offset = function (element, round) {\n        if (round === void 0) { round = true; }\n        var elBcr = element.getBoundingClientRect();\n        var viewportOffset = {\n            top: window.pageYOffset - document.documentElement.clientTop,\n            left: window.pageXOffset - document.documentElement.clientLeft\n        };\n        var elOffset = {\n            height: elBcr.height || element.offsetHeight,\n            width: elBcr.width || element.offsetWidth,\n            top: elBcr.top + viewportOffset.top,\n            bottom: elBcr.bottom + viewportOffset.top,\n            left: elBcr.left + viewportOffset.left,\n            right: elBcr.right + viewportOffset.left\n        };\n        if (round) {\n            elOffset.height = Math.round(elOffset.height);\n            elOffset.width = Math.round(elOffset.width);\n            elOffset.top = Math.round(elOffset.top);\n            elOffset.bottom = Math.round(elOffset.bottom);\n            elOffset.left = Math.round(elOffset.left);\n            elOffset.right = Math.round(elOffset.right);\n        }\n        return elOffset;\n    };\n    Positioning.prototype.positionElements = function (hostElement, targetElement, placement, appendToBody) {\n        var hostElPosition = appendToBody ? this.offset(hostElement, false) : this.position(hostElement, false);\n        var targetElStyles = this.getAllStyles(targetElement);\n        var targetElBCR = targetElement.getBoundingClientRect();\n        var placementPrimary = placement.split('-')[0] || 'top';\n        var placementSecondary = placement.split('-')[1] || 'center';\n        var targetElPosition = {\n            'height': targetElBCR.height || targetElement.offsetHeight,\n            'width': targetElBCR.width || targetElement.offsetWidth,\n            'top': 0,\n            'bottom': targetElBCR.height || targetElement.offsetHeight,\n            'left': 0,\n            'right': targetElBCR.width || targetElement.offsetWidth\n        };\n        switch (placementPrimary) {\n            case 'top':\n                targetElPosition.top =\n                    hostElPosition.top - (targetElement.offsetHeight + parseFloat(targetElStyles.marginBottom));\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height;\n                break;\n            case 'left':\n                targetElPosition.left =\n                    hostElPosition.left - (targetElement.offsetWidth + parseFloat(targetElStyles.marginRight));\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width;\n                break;\n        }\n        switch (placementSecondary) {\n            case 'top':\n                targetElPosition.top = hostElPosition.top;\n                break;\n            case 'bottom':\n                targetElPosition.top = hostElPosition.top + hostElPosition.height - targetElement.offsetHeight;\n                break;\n            case 'left':\n                targetElPosition.left = hostElPosition.left;\n                break;\n            case 'right':\n                targetElPosition.left = hostElPosition.left + hostElPosition.width - targetElement.offsetWidth;\n                break;\n            case 'center':\n                if (placementPrimary === 'top' || placementPrimary === 'bottom') {\n                    targetElPosition.left = hostElPosition.left + hostElPosition.width / 2 - targetElement.offsetWidth / 2;\n                }\n                else {\n                    targetElPosition.top = hostElPosition.top + hostElPosition.height / 2 - targetElement.offsetHeight / 2;\n                }\n                break;\n        }\n        targetElPosition.top = Math.round(targetElPosition.top);\n        targetElPosition.bottom = Math.round(targetElPosition.bottom);\n        targetElPosition.left = Math.round(targetElPosition.left);\n        targetElPosition.right = Math.round(targetElPosition.right);\n        return targetElPosition;\n    };\n    return Positioning;\n}());\nexport { Positioning };\nvar positionService = new Positioning();\nexport function positionElements(hostElement, targetElement, placement, appendToBody) {\n    var pos = positionService.positionElements(hostElement, targetElement, placement, appendToBody);\n    targetElement.style.top = pos.top + \"px\";\n    targetElement.style.left = pos.left + \"px\";\n}\n//# sourceMappingURL=positioning.js.map\n\n\n//////////////////\n// WEBPACK FOOTER\n// /home/netset/projects/new/BelieveAppAdmin/node_modules/positioning/dist/positioning.js\n// module id = ../../../../positioning/dist/positioning.js\n// module chunks = popup.module"],"sourceRoot":"webpack:///"}